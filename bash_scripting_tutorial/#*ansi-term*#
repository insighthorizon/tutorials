sed: -e expression #1, char 6: unknown command: `/'
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
/dev/stdin
21 /dev/stdin
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ wc -l | login.sh

[1]+  Stopped                 wc -l | login.sh
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ login.sh: command not found

marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ wc -l < login.sh 
10
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ wc -l login.sh                       
10 login.sh
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh               
/dev/stdin
21
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ sed -n '2 p' < login.sh 

marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ sed -n '3 p' < login.sh              
# Ask the user for login details
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | sed -n '3 p'                 
-rwxr-x--- 1 marek marek    197 zář 18 08:44 cars.sh
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | sed -n '2 p'
-rw-rw-r-- 1 marek marek 109137 zář 18 10:00 #*ansi-term*#
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
21
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
21
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
21
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
21
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ cat "wefqefqf" | ./lsfilter.sh
cat: wefqefqf: No such file or directory
0
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo "wefqefqf" | ./lsfilter.sh      
1
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo "wefqefqf" | ./lsfilter.sh
1
/dev/stdin
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
21
/dev/stdin
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
21
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
21
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./lsfilter.sh < login.sh 
10
#!/bin/bash

# Ask the user for login details

read -p 'Username: ' uservar
read -sp 'Password: ' passvar

echo
echo Thankyou $uservar we now have your login details


marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./lsfilter.sh < login.sh 
10
/dev/stdin

marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./lsfilter.sh < login.sh 
10
#!/bin/bash

# Ask the user for login details

read -p 'Username: ' uservar
read -sp 'Password: ' passvar

echo
echo Thankyou $uservar we now have your login details


marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ cat ./login.sh | ./lsfilter.sh
10
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ cat ./login.sh | ./lsfilter.sh
./lsfilter.sh: line 6: $1: ambiguous redirect

#!/bin/bash

# Ask the user for login details

read -p 'Username: ' uservar
read -sp 'Password: ' passvar

echo
echo Thankyou $uservar we now have your login details

./lsfilter.sh: line 12: : No such file or directory
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ grep -e 'AAA' < "bbbAAABB"
bash: bbbAAABB: No such file or directory
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ grep -e 'AAA' < echo "bbbAAABB"
bash: echo: No such file or directory
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh                
./lsfilter.sh: line 6: $1: ambiguous redirect

total 160
-rw-rw-r-- 1 marek marek 105793 zář 18 10:10 #*ansi-term*#
-rwxr-x--- 1 marek marek    197 zář 18 08:44 cars.sh
-rwxr-x--- 1 marek marek    390 zář 17 13:08 fileBackup.sh
-rwxr-x--- 1 marek marek    570 zář 18 09:03 inputAct.sh
-rwxr-x--- 1 marek marek      0 zář 18 08:05 inputAct.sh~
-rwxr-x--- 1 marek marek    118 zář 18 09:37 inputStdin.sh
-rwxr-x--- 1 marek marek      0 zář 18 09:31 inputStdin.sh~
-rwxr-x--- 1 marek marek    128 zář 17 13:59 introduction.sh
-rwxr-x--- 1 marek marek    167 zář 17 14:28 login.sh
-rwxr-x--- 1 marek marek    335 zář 18 10:09 lsfilter.sh
-rwxr-x--- 1 marek marek      0 zář 18 09:47 lsfilter.sh~
-rwxrwxr-x 1 marek marek    444 zář 17 08:59 myscript.sh
-rwxrwxr-x 1 marek marek    139 zář 17 08:59 nextscript.sh
-rwxrwxr-x 1 marek marek    368 zář 17 08:59 random_word.sh
-rw-rw-r-- 1 marek marek    116 zář 18 07:58 salesdata.txt
-rw-rw-r-- 1 marek marek      0 zář 18 07:58 salesdata.txt~
-rwxrwxr-x 1 marek marek    202 zář 17 09:49 script1.sh
-rwxrwxr-x 1 marek marek    132 zář 17 08:59 script2.sh
-rwxrwxr-x 1 marek marek    172 zář 18 07:58 summary.sh
-rwxrwxr-x 1 marek marek      0 zář 18 07:58 summary.sh~
./lsfilter.sh: line 12: : No such file or directory
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
./lsfilter.sh: line 6: $1: ambiguous redirect

./lsfilter.sh: line 12: : No such file or directory
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
./lsfilter.sh: line 6: : No such file or directory

./lsfilter.sh: line 11: : No such file or directory
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
1
./lsfilter.sh: line 11: : No such file or directory
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh

1
./lsfilter.sh: line 11: : No such file or directory
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l
total 160
-rw-rw-r-- 1 marek marek 105793 zář 18 10:10 #*ansi-term*#
-rwxr-x--- 1 marek marek    197 zář 18 08:44 cars.sh
-rwxr-x--- 1 marek marek    390 zář 17 13:08 fileBackup.sh
-rwxr-x--- 1 marek marek    570 zář 18 09:03 inputAct.sh
-rwxr-x--- 1 marek marek      0 zář 18 08:05 inputAct.sh~
-rwxr-x--- 1 marek marek    118 zář 18 09:37 inputStdin.sh
-rwxr-x--- 1 marek marek      0 zář 18 09:31 inputStdin.sh~
-rwxr-x--- 1 marek marek    128 zář 17 13:59 introduction.sh
-rwxr-x--- 1 marek marek    167 zář 17 14:28 login.sh
-rwxr-x--- 1 marek marek    349 zář 18 10:13 lsfilter.sh
-rwxr-x--- 1 marek marek      0 zář 18 09:47 lsfilter.sh~
-rwxrwxr-x 1 marek marek    444 zář 17 08:59 myscript.sh
-rwxrwxr-x 1 marek marek    139 zář 17 08:59 nextscript.sh
-rwxrwxr-x 1 marek marek    368 zář 17 08:59 random_word.sh
-rw-rw-r-- 1 marek marek    116 zář 18 07:58 salesdata.txt
-rw-rw-r-- 1 marek marek      0 zář 18 07:58 salesdata.txt~
-rwxrwxr-x 1 marek marek    202 zář 17 09:49 script1.sh
-rwxrwxr-x 1 marek marek    132 zář 17 08:59 script2.sh
-rwxrwxr-x 1 marek marek    172 zář 18 07:58 summary.sh
-rwxrwxr-x 1 marek marek      0 zář 18 07:58 summary.sh~
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | wc -l
21
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | wc -l
21
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
cat: '': No such file or directory

0
./lsfilter.sh: line 11: : No such file or directory
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh

1
./lsfilter.sh: line 11: : No such file or directory
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh        
wc: invalid zero-length file name


./lsfilter.sh: line 11: : No such file or directory
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ 
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ cat lsfilter.sh
#!/bin/bash

# Now play about with creating a script which will behave as a filter. Create a script which will rearrange the 
output of the command ls -l in a useful way (eg maybe you only print the filename, size and owner) (Hint: awk ca
n be useful here).                                                                                             


marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ cat ./login.sh | ./lsfilter.sh
./lsfilter.sh: line 6: #!/bin/bash

# Ask the user for login details

read -p 'Username: ' uservar
read -sp 'Password: ' passvar

echo
echo Thankyou $uservar we now have your login details: No such file or directory
#!/bin/bash

# Ask the user for login details

read -p 'Username: ' uservar
read -sp 'Password: ' passvar

echo
echo Thankyou $uservar we now have your login details

marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ cat ./login.sh | ./lsfilter.sh
./lsfilter.sh: line 6: #!/bin/bash

# Ask the user for login details

read -p 'Username: ' uservar
read -sp 'Password: ' passvar

echo
echo Thankyou $uservar we now have your login details: No such file or directory
#!/bin/bash

# Ask the user for login details

read -p 'Username: ' uservar
read -sp 'Password: ' passvar

echo
echo Thankyou $uservar we now have your login details
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ cat ./login.sh 
#!/bin/bash

# Ask the user for login details

read -p 'Username: ' uservar
read -sp 'Password: ' passvar

echo
echo Thankyou $uservar we now have your login details

marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ cat ./login.sh | ./lsfilter.sh
#!/bin/bash

# Ask the user for login details

read -p 'Username: ' uservar
read -sp 'Password: ' passvar

echo
echo Thankyou $uservar we now have your login details
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ cat ./login.sh | ./lsfilter.sh
#!/bin/bash

# Ask the user for login details

read -p 'Username: ' uservar
read -sp 'Password: ' passvar

echo
echo Thankyou $uservar we now have your login details
9
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ cat ./login.sh | ./lsfilter.sh
#!/bin/bash

# Ask the user for login details

read -p 'Username: ' uservar
read -sp 'Password: ' passvar

echo
echo Thankyou $uservar we now have your login details
9

# Ask the user for login details

read -p 'Username: ' uservar
read -sp 'Password: ' passvar

echo
echo Thankyou $uservar we now have your login details
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh                
total 260
-rw-rw-r-- 1 marek marek 103463 zář 18 10:15 *ansi-term*
-rw-rw-r-- 1 marek marek 101334 zář 18 10:31 #*ansi-term*#
-rwxr-x--- 1 marek marek    197 zář 18 08:44 cars.sh
-rwxr-x--- 1 marek marek    390 zář 17 13:08 fileBackup.sh
-rwxr-x--- 1 marek marek    570 zář 18 09:03 inputAct.sh
-rwxr-x--- 1 marek marek      0 zář 18 08:05 inputAct.sh~
-rwxr-x--- 1 marek marek    118 zář 18 09:37 inputStdin.sh
-rwxr-x--- 1 marek marek      0 zář 18 09:31 inputStdin.sh~
-rwxr-x--- 1 marek marek    128 zář 17 13:59 introduction.sh
-rwxr-x--- 1 marek marek    167 zář 17 14:28 login.sh
-rwxr-x--- 1 marek marek    389 zář 18 10:30 lsfilter.sh
-rwxr-x--- 1 marek marek      0 zář 18 09:47 lsfilter.sh~
-rwxrwxr-x 1 marek marek    444 zář 17 08:59 myscript.sh
-rwxrwxr-x 1 marek marek    139 zář 17 08:59 nextscript.sh
-rwxrwxr-x 1 marek marek    368 zář 17 08:59 random_word.sh
-rw-rw-r-- 1 marek marek    116 zář 18 07:58 salesdata.txt
-rw-rw-r-- 1 marek marek      0 zář 18 07:58 salesdata.txt~
-rwxrwxr-x 1 marek marek    202 zář 17 09:49 script1.sh
-rwxrwxr-x 1 marek marek    132 zář 17 08:59 script2.sh
-rwxrwxr-x 1 marek marek    172 zář 18 07:58 summary.sh
-rwxrwxr-x 1 marek marek      0 zář 18 07:58 summary.sh~
22
-rw-rw-r-- 1 marek marek 103463 zář 18 10:15 *ansi-term*
-rw-rw-r-- 1 marek marek 101334 zář 18 10:31 #*ansi-term*#
-rwxr-x--- 1 marek marek    197 zář 18 08:44 cars.sh
-rwxr-x--- 1 marek marek    390 zář 17 13:08 fileBackup.sh
-rwxr-x--- 1 marek marek    570 zář 18 09:03 inputAct.sh
-rwxr-x--- 1 marek marek      0 zář 18 08:05 inputAct.sh~
-rwxr-x--- 1 marek marek    118 zář 18 09:37 inputStdin.sh
-rwxr-x--- 1 marek marek      0 zář 18 09:31 inputStdin.sh~
-rwxr-x--- 1 marek marek    128 zář 17 13:59 introduction.sh
-rwxr-x--- 1 marek marek    167 zář 17 14:28 login.sh
-rwxr-x--- 1 marek marek    389 zář 18 10:30 lsfilter.sh
-rwxr-x--- 1 marek marek      0 zář 18 09:47 lsfilter.sh~
-rwxrwxr-x 1 marek marek    444 zář 17 08:59 myscript.sh
-rwxrwxr-x 1 marek marek    139 zář 17 08:59 nextscript.sh
-rwxrwxr-x 1 marek marek    368 zář 17 08:59 random_word.sh
-rw-rw-r-- 1 marek marek    116 zář 18 07:58 salesdata.txt
-rw-rw-r-- 1 marek marek      0 zář 18 07:58 salesdata.txt~
-rwxrwxr-x 1 marek marek    202 zář 17 09:49 script1.sh
-rwxrwxr-x 1 marek marek    132 zář 17 08:59 script2.sh
-rwxrwxr-x 1 marek marek    172 zář 18 07:58 summary.sh
-rwxrwxr-x 1 marek marek      0 zář 18 07:58 summary.sh~
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
-rw-rw-r-- 1 marek marek 103463 zář 18 10:15 *ansi-term*
-rw-rw-r-- 1 marek marek 101334 zář 18 10:31 #*ansi-term*#
-rwxr-x--- 1 marek marek    197 zář 18 08:44 cars.sh
-rwxr-x--- 1 marek marek    390 zář 17 13:08 fileBackup.sh
-rwxr-x--- 1 marek marek    570 zář 18 09:03 inputAct.sh
-rwxr-x--- 1 marek marek      0 zář 18 08:05 inputAct.sh~
-rwxr-x--- 1 marek marek    118 zář 18 09:37 inputStdin.sh
-rwxr-x--- 1 marek marek      0 zář 18 09:31 inputStdin.sh~
-rwxr-x--- 1 marek marek    128 zář 17 13:59 introduction.sh
-rwxr-x--- 1 marek marek    167 zář 17 14:28 login.sh
-rwxr-x--- 1 marek marek    363 zář 18 10:31 lsfilter.sh
-rwxr-x--- 1 marek marek      0 zář 18 09:47 lsfilter.sh~
-rwxrwxr-x 1 marek marek    444 zář 17 08:59 myscript.sh
-rwxrwxr-x 1 marek marek    139 zář 17 08:59 nextscript.sh
-rwxrwxr-x 1 marek marek    368 zář 17 08:59 random_word.sh
-rw-rw-r-- 1 marek marek    116 zář 18 07:58 salesdata.txt
-rw-rw-r-- 1 marek marek      0 zář 18 07:58 salesdata.txt~
-rwxrwxr-x 1 marek marek    202 zář 17 09:49 script1.sh
-rwxrwxr-x 1 marek marek    132 zář 17 08:59 script2.sh
-rwxrwxr-x 1 marek marek    172 zář 18 07:58 summary.sh
-rwxrwxr-x 1 marek marek      0 zář 18 07:58 summary.sh~
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
*ansi-term*
#*ansi-term*#
cars.sh
fileBackup.sh
inputAct.sh
inputAct.sh~
inputStdin.sh
inputStdin.sh~
introduction.sh
login.sh
lsfilter.sh
lsfilter.sh~
myscript.sh
nextscript.sh
random_word.sh
salesdata.txt
salesdata.txt~
script1.sh
script2.sh
summary.sh
summary.sh~
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
*ansi-term* 103463 marek
#*ansi-term*# 101334 marek
cars.sh 197 marek
fileBackup.sh 390 marek
inputAct.sh 570 marek
inputAct.sh~ 0 marek
inputStdin.sh 118 marek
inputStdin.sh~ 0 marek
introduction.sh 128 marek
login.sh 167 marek
lsfilter.sh 370 marek
lsfilter.sh~ 0 marek
myscript.sh 444 marek
nextscript.sh 139 marek
random_word.sh 368 marek
salesdata.txt 116 marek
salesdata.txt~ 0 marek
script1.sh 202 marek
script2.sh 132 marek
summary.sh 172 marek
summary.sh~ 0 marek
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls -l | ./lsfilter.sh
*ansi-term* 103463 marek
#*ansi-term*# 101334 marek
cars.sh 197 marek
fileBackup.sh 390 marek
inputAct.sh 570 marek
inputAct.sh~ 0 marek
inputStdin.sh 118 marek
inputStdin.sh~ 0 marek
introduction.sh 128 marek
login.sh 167 marek
lsfilter.sh 370 marek
lsfilter.sh~ 0 marek
myscript.sh 444 marek
nextscript.sh 139 marek
random_word.sh 368 marek
salesdata.txt 116 marek
salesdata.txt~ 0 marek
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ 
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ 
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls
*ansi-term*    fileBackup.sh  inputStdin.sh    login.sh      myscript.sh     salesdata.txt   script2.sh
#*ansi-term*#  inputAct.sh    inputStdin.sh~   lsfilter.sh   nextscript.sh   salesdata.txt~  summary.sh
cars.sh        inputAct.sh~   introduction.sh  lsfilter.sh~  random_word.sh  script1.sh      summary.sh~
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ cat salesdata.txt
Fred apples 20 September 4
Susy oranges 5 September 7
Mark watermelons 12 September 10
Terry peaches 7 September 15
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ cat salesdata.txt~
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ rm salesdata.txt~
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ls
*ansi-term*    fileBackup.sh  inputStdin.sh    login.sh      myscript.sh     salesdata.txt  summary.sh
#*ansi-term*#  inputAct.sh    inputStdin.sh~   lsfilter.sh   nextscript.sh   script1.sh     summary.sh~
cars.sh        inputAct.sh~   introduction.sh  lsfilter.sh~  random_word.sh  script2.sh
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   *ansi-term*
        modified:   cars.sh
        deleted:    salesdata.txt~

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        #*ansi-term*#
        .#*ansi-term*
        inputAct.sh
        inputAct.sh~
        inputStdin.sh
        inputStdin.sh~
        lsfilter.sh
        lsfilter.sh~

no changes added to commit (use "git add" and/or "git commit -a")
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ git add *
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   #*ansi-term*#
        modified:   *ansi-term*
        new file:   .#*ansi-term*
        modified:   cars.sh
        new file:   inputAct.sh
        new file:   inputAct.sh~
        new file:   inputStdin.sh
        new file:   inputStdin.sh~
        new file:   lsfilter.sh
        new file:   lsfilter.sh~

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    salesdata.txt~

marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ git commit -m "very nice"
[master a63f724] very nice
 10 files changed, 4079 insertions(+), 2034 deletions(-)
 create mode 100644 bash_scripting_tutorial/#*ansi-term*#
 rewrite bash_scripting_tutorial/*ansi-term* (84%)
 create mode 120000 bash_scripting_tutorial/.#*ansi-term*
 create mode 100755 bash_scripting_tutorial/inputAct.sh
 create mode 100755 bash_scripting_tutorial/inputAct.sh~
 create mode 100755 bash_scripting_tutorial/inputStdin.sh
 create mode 100755 bash_scripting_tutorial/inputStdin.sh~
 create mode 100755 bash_scripting_tutorial/lsfilter.sh
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ expr 5 + 3
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ expr 5 \* 3
15
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ expr 5 * 3
expr: syntax error
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ expr "5 * 4"
5 * 4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ expr "5 \* 4"                        
5 \* 4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ expr 4G4
4G4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ expr 4\*4
4*4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ expr gwgawhwh
gwgawhwh
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ expr gwgawh | a
a: command not found
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ expr gwgawh + 3
expr: non-integer argument
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ (( b = 11))
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo b
b
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $b
11
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ man sed
SED(1)                                          User Commands                                          SED(1)

NAME
       sed - stream editor for filtering and transforming text

SYNOPSIS
       sed [OPTION]... {script-only-if-no-other-script} [input-file]...

DESCRIPTION
       Sed  is  a  stream  editor.  A stream editor is used to perform basic text transformations on an input
       stream (a file or input from a pipeline).  While in some ways  similar  to  an  editor  which  permits
       scripted  edits (such as ed), sed works by making only one pass over the input(s), and is consequently
       more efficient.  But it is sed's ability to filter text in a pipeline which particularly distinguishes
       it from other types of editors.

       -n, --quiet, --silent

              suppress automatic printing of pattern space

       -e script, --expression=script

              add the script to the commands to be executed

       -f script-file, --file=script-file

              add the contents of script-file to the commands to be executed

       --follow-symlinks

              follow symlinks when processing in place

       -i[SUFFIX], --in-place[=SUFFIX]

              edit files in place (makes backup if SUFFIX supplied)

       -l N, --line-length=N

              specify the desired line-wrap length for the `l' command

       --posix

              disable all GNU extensions.

       -r, --regexp-extended

              use extended regular expressions in the script.

       -s, --separate

              consider files as separate rather than as a single continuous long stream.

       -u, --unbuffered

              load minimal amounts of data from the input files and flush the output buffers more often

       -z, --null-data

              separate lines by NUL characters

       --help
              display this help and exit

       --version
              output version information and exit

       If  no -e, --expression, -f, or --file option is given, then the first non-option argument is taken as
       the sed script to interpret.  All remaining arguments are names of input files; if no input files  are
       specified, then the standard input is read.

       GNU   sed   home   page:   <http://www.gnu.org/software/sed/>.    General  help  using  GNU  software:
       <http://www.gnu.org/gethelp/>.  E-mail bug reports to: <bug-sed@gnu.org>.  Be sure to include the word
       ``sed'' somewhere in the ``Subject:'' field.

COMMAND SYNOPSIS
       This  is  just  a brief synopsis of sed commands to serve as a reminder to those who already know sed;
       other documentation (such as the texinfo document) must be consulted for fuller descriptions.

   Zero-address ``commands''
       : label
              Label for b and t commands.

       #comment
              The comment extends until the next newline (or the end of a -e script fragment).

       }      The closing bracket of a { } block.

   Zero- or One- address commands
       =      Print the current line number.

       a \

       text   Append text, which has each embedded newline preceded by a backslash.

       i \

       text   Insert text, which has each embedded newline preceded by a backslash.

       q [exit-code]
              Immediately quit the sed script without processing any more input, except that if auto-print is
              not disabled the current pattern space will be printed.  The exit code argument is a GNU exten‐
...skipping...
       r filename
              Append text read from filename.

       R filename
              Append a line read from filename.  Each invocation of the command reads a line from  the  file.
              This is a GNU extension.

   Commands which accept address ranges
       {      Begin a block of commands (end with a }).

       b label
              Branch to label; if label is omitted, branch to end of script.

       c \

       text   Replace the selected lines with text, which has each embedded newline preceded by a backslash.

       d      Delete pattern space.  Start next cycle.

       D      If  pattern space contains no newline, start a normal new cycle as if the d command was issued.
              Otherwise, delete text in the pattern space up to the first newline, and restart cycle with the
              resultant pattern space, without reading a new line of input.

       h H    Copy/append pattern space to hold space.

       g G    Copy/append hold space to pattern space.

       l      List out the current line in a ``visually unambiguous'' form.

       l width
              List  out the current line in a ``visually unambiguous'' form, breaking it at width characters.
              This is a GNU extension.

       n N    Read/append the next line of input into the pattern space.

       p      Print the current pattern space.

       P      Print up to the first embedded newline of the current pattern space.

       s/regexp/replacement/
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ touch arithmetics1.sh
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ chmod 750 arithmetics1.sh 
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics1.sh 1 3

marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ let "2 * 4"
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ let "2 * 4" | echo

marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics1.sh 2 3
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics1.sh 2 3
6


marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics1.sh 2 3
6
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics1.sh 2 3
Using let:
6

Using expr:
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics1.sh 2 3
Using let:
6

Using expr:
6

Using double parentheses:
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics1.sh 4 5
Using let:
20

Using expr:
20

Using double parentheses:
20
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ date -d '+1 day'
St zář 19 12:32:12 CEST 2018
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ $(( today + 86400 ))
86400: command not found
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ $(( today + 86400 ))
86400: command not found
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ today=`date`
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ today=`date +%`
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $today
%
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ today=`date +%s`
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $today
1537266861
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ date --date 'next day'
St zář 19 12:34:56 CEST 2018
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ man date
DATE(1)                                         User Commands                                         DATE(1)

NAME
       date - print or set the system date and time

SYNOPSIS
       date [OPTION]... [+FORMAT]
       date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]

DESCRIPTION
       Display the current time in the given FORMAT, or set the system date.

       Mandatory arguments to long options are mandatory for short options too.

       -d, --date=STRING
              display time described by STRING, not 'now'

       -f, --file=DATEFILE
              like --date; once for each line of DATEFILE

       -I[FMT], --iso-8601[=FMT]
              output  date/time  in  ISO 8601 format.  FMT='date' for date only (the default), 'hours', 'min‐
              utes',  'seconds',  or  'ns'  for  date  and  time  to  the  indicated   precision.    Example:
              2006-08-14T02:34:56-0600

       -R, --rfc-2822
              output date and time in RFC 2822 format.  Example: Mon, 14 Aug 2006 02:34:56 -0600

       --rfc-3339=FMT
              output  date/time  in RFC 3339 format.  FMT='date', 'seconds', or 'ns' for date and time to the
              indicated precision.  Example: 2006-08-14 02:34:56-06:00

       -r, --reference=FILE
              display the last modification time of FILE

       -s, --set=STRING
              set time described by STRING

       -u, --utc, --universal
              print or set Coordinated Universal Time (UTC)

       --help display this help and exit

       --version
              output version information and exit

       FORMAT controls the output.  Interpreted sequences are:

       %%     a literal %

       %a     locale's abbreviated weekday name (e.g., Sun)

       %A     locale's full weekday name (e.g., Sunday)

       %b     locale's abbreviated month name (e.g., Jan)

       %B     locale's full month name (e.g., January)
...skipping...
       Show the local time for 9AM next Friday on the west coast of the US

              $ date --date='TZ="America/Los_Angeles" 09:00 next Fri'

DATE STRING
       The --date=STRING is a mostly free format human readable  date  string  such  as  "Sun,  29  Feb  2004
       16:21:42  -0800"  or  "2004-02-29  16:21:42" or even "next Thursday".  A date string may contain items
       indicating calendar date, time of day, time zone, day of week, relative time, relative date, and  num‐
       bers.   An  empty  string  indicates the beginning of the day.  The date string format is more complex
       than is easily documented here but is fully described in the info documentation.

AUTHOR
       Written by David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: <http://www.gnu.org/software/coreutils/>
       Report date translation bugs to <http://translationproject.org/team/>

COPYRIGHT
       Copyright © 2016 Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later
       <http://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you  are  free to change and redistribute it.  There is NO WARRANTY, to the
       extent permitted by law.

SEE ALSO
       Full documentation at: <http://www.gnu.org/software/coreutils/date>
       or available locally via: info '(coreutils) date invocation'

GNU coreutils 8.25                              February 2017                                         DATE(1)
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ man date
DATE(1)                                         User Commands                                         DATE(1)

NAME
       date - print or set the system date and time

SYNOPSIS
       date [OPTION]... [+FORMAT]
       date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]

DESCRIPTION
       Display the current time in the given FORMAT, or set the system date.

       Mandatory arguments to long options are mandatory for short options too.

       -d, --date=STRING
              display time described by STRING, not 'now'

       -f, --file=DATEFILE
              like --date; once for each line of DATEFILE

       -I[FMT], --iso-8601[=FMT]
              output  date/time  in  ISO 8601 format.  FMT='date' for date only (the default), 'hours', 'min‐
              utes',  'seconds',  or  'ns'  for  date  and  time  to  the  indicated   precision.    Example:
              2006-08-14T02:34:56-0600

       -R, --rfc-2822
              output date and time in RFC 2822 format.  Example: Mon, 14 Aug 2006 02:34:56 -0600

       --rfc-3339=FMT
              output  date/time  in RFC 3339 format.  FMT='date', 'seconds', or 'ns' for date and time to the
              indicated precision.  Example: 2006-08-14 02:34:56-06:00

       -r, --reference=FILE
              display the last modification time of FILE

       -s, --set=STRING
              set time described by STRING

       -u, --utc, --universal
              print or set Coordinated Universal Time (UTC)

       --help display this help and exit

       --version
              output version information and exit

       FORMAT controls the output.  Interpreted sequences are:

       %%     a literal %

       %a     locale's abbreviated weekday name (e.g., Sun)

       %A     locale's full weekday name (e.g., Sunday)

       %b     locale's abbreviated month name (e.g., Jan)

       %B     locale's full month name (e.g., January)
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ man date
DATE(1)                                         User Commands                                         DATE(1)

NAME
       date - print or set the system date and time

SYNOPSIS
       date [OPTION]... [+FORMAT]
       date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]

DESCRIPTION
       Display the current time in the given FORMAT, or set the system date.

       Mandatory arguments to long options are mandatory for short options too.

       -d, --date=STRING
              display time described by STRING, not 'now'

       -f, --file=DATEFILE
              like --date; once for each line of DATEFILE

       -I[FMT], --iso-8601[=FMT]
              output  date/time  in  ISO 8601 format.  FMT='date' for date only (the default), 'hours', 'min‐
              utes',  'seconds',  or  'ns'  for  date  and  time  to  the  indicated   precision.    Example:
              2006-08-14T02:34:56-0600

       -R, --rfc-2822
              output date and time in RFC 2822 format.  Example: Mon, 14 Aug 2006 02:34:56 -0600

       --rfc-3339=FMT
       --rfc-3339=FMT
              output  date/time  in RFC 3339 format.  FMT='date', 'seconds', or 'ns' for date and time to the
              indicated precision.  Example: 2006-08-14 02:34:56-06:00

       -r, --reference=FILE
              display the last modification time of FILE

       -s, --set=STRING
              set time described by STRING

       -u, --utc, --universal
              print or set Coordinated Universal Time (UTC)

       --help display this help and exit

       --version
              output version information and exit

       FORMAT controls the output.  Interpreted sequences are:

       %%     a literal %

       %a     locale's abbreviated weekday name (e.g., Sun)

       %A     locale's full weekday name (e.g., Sunday)

       %b     locale's abbreviated month name (e.g., Jan)

       %B     locale's full month name (e.g., January)

       %c     locale's date and time (e.g., Thu Mar  3 23:05:25 2005)

       %C     century; like %Y, except omit last two digits (e.g., 20)

       %d     day of month (e.g., 01)

       %D     date; same as %m/%d/%y

       %e     day of month, space padded; same as %_d

       %F     full date; same as %Y-%m-%d

       %g     last two digits of year of ISO week number (see %G)

       %G     year of ISO week number (see %V); normally useful only with %V

       %h     same as %b

       %H     hour (00..23)

       %I     hour (01..12)

       %j     day of year (001..366)

       %k     hour, space padded ( 0..23); same as %_H

       %l     hour, space padded ( 1..12); same as %_I

       %m     month (01..12)

       %M     minute (00..59)

       %n     a newline

       %N     nanoseconds (000000000..999999999)

       %p     locale's equivalent of either AM or PM; blank if not known

       %P     like %p, but lower case

       %r     locale's 12-hour clock time (e.g., 11:11:04 PM)

       %R     24-hour hour and minute; same as %H:%M

       %s     seconds since 1970-01-01 00:00:00 UTC

       %S     second (00..60)

       %t     a tab
...skipping...
       Show the local time for 9AM next Friday on the west coast of the US

              $ date --date='TZ="America/Los_Angeles" 09:00 next Fri'

DATE STRING
       The --date=STRING is a mostly free format human readable  date  string  such  as  "Sun,  29  Feb  2004
DATE(1)                                         User Commands                                         DATE(1)

NAME
       date - print or set the system date and time

SYNOPSIS
       date [OPTION]... [+FORMAT]
       date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]

DESCRIPTION
       Display the current time in the given FORMAT, or set the system date.

       Mandatory arguments to long options are mandatory for short options too.

       -d, --date=STRING
              display time described by STRING, not 'now'

       -f, --file=DATEFILE
              like --date; once for each line of DATEFILE

       -I[FMT], --iso-8601[=FMT]
              output  date/time  in  ISO 8601 format.  FMT='date' for date only (the default), 'hours', 'min‐
              utes',  'seconds',  or  'ns'  for  date  and  time  to  the  indicated   precision.    Example:
              2006-08-14T02:34:56-0600

       -R, --rfc-2822
              output date and time in RFC 2822 format.  Example: Mon, 14 Aug 2006 02:34:56 -0600

       --rfc-3339=FMT
              output  date/time  in RFC 3339 format.  FMT='date', 'seconds', or 'ns' for date and time to the
              indicated precision.  Example: 2006-08-14 02:34:56-06:00

       -r, --reference=FILE
              display the last modification time of FILE

       -s, --set=STRING
              set time described by STRING

       -u, --utc, --universal
              print or set Coordinated Universal Time (UTC)

       --help display this help and exit

       --version
              output version information and exit

       FORMAT controls the output.  Interpreted sequences are:

       %%     a literal %

       %a     locale's abbreviated weekday name (e.g., Sun)

       %A     locale's full weekday name (e.g., Sunday)

       %b     locale's abbreviated month name (e.g., Jan)

       %B     locale's full month name (e.g., January)
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ man date
DATE(1)                                         User Commands                                         DATE(1)

NAME
       date - print or set the system date and time

SYNOPSIS
       date [OPTION]... [+FORMAT]
       date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]

DESCRIPTION
       Display the current time in the given FORMAT, or set the system date.

       Mandatory arguments to long options are mandatory for short options too.

       -d, --date=STRING
              display time described by STRING, not 'now'

       -f, --file=DATEFILE
              like --date; once for each line of DATEFILE

       -I[FMT], --iso-8601[=FMT]
              output  date/time  in  ISO 8601 format.  FMT='date' for date only (the default), 'hours', 'min‐
              utes',  'seconds',  or  'ns'  for  date  and  time  to  the  indicated   precision.    Example:
              2006-08-14T02:34:56-0600

       -R, --rfc-2822
              output date and time in RFC 2822 format.  Example: Mon, 14 Aug 2006 02:34:56 -0600

       --rfc-3339=FMT
              output  date/time  in RFC 3339 format.  FMT='date', 'seconds', or 'ns' for date and time to the
              indicated precision.  Example: 2006-08-14 02:34:56-06:00

       -r, --reference=FILE
              display the last modification time of FILE

       -s, --set=STRING
              set time described by STRING

       -u, --utc, --universal
              print or set Coordinated Universal Time (UTC)

       --help display this help and exit

       --version
              output version information and exit

       FORMAT controls the output.  Interpreted sequences are:

       %%     a literal %

       %a     locale's abbreviated weekday name (e.g., Sun)

       %A     locale's full weekday name (e.g., Sunday)

       %b     locale's abbreviated month name (e.g., Jan)

       %B     locale's full month name (e.g., January)
...skipping...
       Show the local time for 9AM next Friday on the west coast of the US

              $ date --date='TZ="America/Los_Angeles" 09:00 next Fri'

DATE STRING
       The --date=STRING is a mostly free format human readable  date  string  such  as  "Sun,  29  Feb  2004
DATE(1)                                         User Commands                                         DATE(1)

NAME
       date - print or set the system date and time

SYNOPSIS
       date [OPTION]... [+FORMAT]
       date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]

DESCRIPTION
       Display the current time in the given FORMAT, or set the system date.

       Mandatory arguments to long options are mandatory for short options too.

       -d, --date=STRING
              display time described by STRING, not 'now'

       -f, --file=DATEFILE
              like --date; once for each line of DATEFILE

       -I[FMT], --iso-8601[=FMT]
              output  date/time  in  ISO 8601 format.  FMT='date' for date only (the default), 'hours', 'min‐
              utes',  'seconds',  or  'ns'  for  date  and  time  to  the  indicated   precision.    Example:
              2006-08-14T02:34:56-0600

       -R, --rfc-2822
              output date and time in RFC 2822 format.  Example: Mon, 14 Aug 2006 02:34:56 -0600

       --rfc-3339=FMT
              output  date/time  in RFC 3339 format.  FMT='date', 'seconds', or 'ns' for date and time to the
              indicated precision.  Example: 2006-08-14 02:34:56-06:00

       -r, --reference=FILE
              display the last modification time of FILE

       -s, --set=STRING
              set time described by STRING

       -u, --utc, --universal
              print or set Coordinated Universal Time (UTC)

       --help display this help and exit

       --version
              output version information and exit

       FORMAT controls the output.  Interpreted sequences are:

       %%     a literal %

       %a     locale's abbreviated weekday name (e.g., Sun)

       %A     locale's full weekday name (e.g., Sunday)

       %b     locale's abbreviated month name (e.g., Jan)

       %B     locale's full month name (e.g., January)
...skipping...
       Show the local time for 9AM next Friday on the west coast of the US

              $ date --date='TZ="America/Los_Angeles" 09:00 next Fri'

DATE STRING
       The --date=STRING is a mostly free format human readable  date  string  such  as  "Sun,  29  Feb  2004
DATE(1)                                         User Commands                                         DATE(1)

NAME
       date - print or set the system date and time

SYNOPSIS
       date [OPTION]... [+FORMAT]
       date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]

DESCRIPTION
       Display the current time in the given FORMAT, or set the system date.

       Mandatory arguments to long options are mandatory for short options too.

       -d, --date=STRING
              display time described by STRING, not 'now'

       -f, --file=DATEFILE
              like --date; once for each line of DATEFILE

       -I[FMT], --iso-8601[=FMT]
              output  date/time  in  ISO 8601 format.  FMT='date' for date only (the default), 'hours', 'min‐
              utes',  'seconds',  or  'ns'  for  date  and  time  to  the  indicated   precision.    Example:
              2006-08-14T02:34:56-0600

       -R, --rfc-2822
              output date and time in RFC 2822 format.  Example: Mon, 14 Aug 2006 02:34:56 -0600

       --rfc-3339=FMT
              output  date/time  in RFC 3339 format.  FMT='date', 'seconds', or 'ns' for date and time to the
              indicated precision.  Example: 2006-08-14 02:34:56-06:00

       -r, --reference=FILE
              display the last modification time of FILE

       -s, --set=STRING
              set time described by STRING

       -u, --utc, --universal
              print or set Coordinated Universal Time (UTC)

       --help display this help and exit

       --version
              output version information and exit

       FORMAT controls the output.  Interpreted sequences are:

       %%     a literal %

       %a     locale's abbreviated weekday name (e.g., Sun)

       %A     locale's full weekday name (e.g., Sunday)

       %b     locale's abbreviated month name (e.g., Jan)

       %B     locale's full month name (e.g., January)
...skipping...
       Show the local time for 9AM next Friday on the west coast of the US

              $ date --date='TZ="America/Los_Angeles" 09:00 next Fri'

DATE STRING
       The --date=STRING is a mostly free format human readable  date  string  such  as  "Sun,  29  Feb  2004
       16:21:42  -0800"  or  "2004-02-29  16:21:42" or even "next Thursday".  A date string may contain items
       indicating calendar date, time of day, time zone, day of week, relative time, relative date, and  num‐
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo (($RANDOM % 101))
bash: syntax error near unexpected token `('
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $(($RANDOM % 101))              
43
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ (($RANDOM % 101))
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $(($RANDOM % 101))              
67
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $(($RANDOM % 101))
39
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $(($RANDOM % 101))
93
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $(($RANDOM % 101))
97
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $(($RANDOM % 101))
37
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $(($RANDOM % 101))
51
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $(($RANDOM % 101))
93
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $(($RANDOM % 101))
53
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $(($RANDOM % 101))
48
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $(($RANDOM % 101))
27
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $(($RANDOM % 101))
17
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ echo $(($RANDOM % 101))
71
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics1.sh 2 3
Using let:
6

Using expr:
6

Using double parentheses:
6
./arithmetics1.sh: line 18: % 101 : syntax error: operand expected (error token is "% 101 ")
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics1.sh 2 3
Using let:
6

Using expr:
6

marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ touch arithmetics2.sh
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ chmod 750 arithmetics2.sh 
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics 3 10
bash: ./arithmetics: No such file or directory
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10               
Range is 7

marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
3
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
9
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
9
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
7
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
7
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
3
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
9
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
9
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
3
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
9
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
7
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics 3 10
bash: ./arithmetics: No such file or directory
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics 3 10
bash: ./arithmetics: No such file or directory
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10               
Range is 7
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
7
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
9
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 7
7
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
10
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
10
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
7
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
10
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
9
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
9
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
9
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
9
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
10
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
7
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
7
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
8
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
9
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
9
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
9
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
6
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
4
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
5
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
Range is 8
7
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./arithmetics2.sh 3 10
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ 
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ man man
MAN(1)                                        Manual pager utils                                       MAN(1)
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ touch if_example.sh
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ chmod 750 if_example.sh 
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 101
./if_example.sh: line 5: syntax error near unexpected token `fi'
./if_example.sh: line 5: `   fi'
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 101
./if_example.sh: line 5: syntax error near unexpected token `fi'
./if_example.sh: line 5: `   fi'
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 101
./if_example.sh: line 5: syntax error near unexpected token `fi'
./if_example.sh: line 5: `   fi'
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 101
./if_example.sh: line 3: [: missing `]'
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 101
YES
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 10
YES
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 1
YES
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 1
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 101
YES
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 100
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 10
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 120
YES
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 11111
YES
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 11111
Argument is bigger than 100
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 11
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 11
Argument is smaller than 100
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh -10000
Argument is smaller than 100
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh 10000
Argument is bigger than 100
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh --10000
Argument is bigger than 100
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example.sh ---10000
Argument is smaller than 100
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ 
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ 
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ chmod 750 if_example2.sh 
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example2.sh 100
Út zář 18 15:03:16 CEST 2018
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example2.sh 101
Hey that's a large number.
/home/marek/Documents/tutorials/bash_scripting_tutorial
Út zář 18 15:03:21 CEST 2018
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ ./if_example2.sh --101
./if_example2.sh: line 5: [: --101: integer expression expected
Út zář 18 15:03:47 CEST 2018
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ man test
TEST(1)                                         User Commands                                         TEST(1)

NAME
       test - check file types and compare values

SYNOPSIS
       test EXPRESSION
       test

       [ EXPRESSION ]
       [ ]
       [ OPTION

DESCRIPTION
       Exit with the status determined by EXPRESSION.

       --help display this help and exit

       --version
              output version information and exit

       An omitted EXPRESSION defaults to false.  Otherwise, EXPRESSION is true or false and sets exit status.
       It is one of:

       ( EXPRESSION )
              EXPRESSION is true

       ! EXPRESSION
              EXPRESSION is false

       EXPRESSION1 -a EXPRESSION2
              both EXPRESSION1 and EXPRESSION2 are true

       EXPRESSION1 -o EXPRESSION2
              either EXPRESSION1 or EXPRESSION2 is true

       -n STRING
              the length of STRING is nonzero

       STRING equivalent to -n STRING

       -z STRING
              the length of STRING is zero

       STRING1 = STRING2
              the strings are equal

       STRING1 != STRING2
              the strings are not equal

       INTEGER1 -eq INTEGER2
              INTEGER1 is equal to INTEGER2

       INTEGER1 -ge INTEGER2
              INTEGER1 is greater than or equal to INTEGER2

       INTEGER1 -gt INTEGER2
              INTEGER1 is greater than INTEGER2

       INTEGER1 -le INTEGER2
              INTEGER1 is less than or equal to INTEGER2

       INTEGER1 -lt INTEGER2
              INTEGER1 is less than INTEGER2

       INTEGER1 -ne INTEGER2
              INTEGER1 is not equal to INTEGER2

       FILE1 -ef FILE2
              FILE1 and FILE2 have the same device and inode numbers

       FILE1 -nt FILE2
              FILE1 is newer (modification date) than FILE2

       FILE1 -ot FILE2
              FILE1 is older than FILE2

       -b FILE
              FILE exists and is block special

       -c FILE
              FILE exists and is character special

       -d FILE
              FILE exists and is a directory

       -e FILE
              FILE exists

       -f FILE
              FILE exists and is a regular file

       -g FILE
              FILE exists and is set-group-ID

       -G FILE
              FILE exists and is owned by the effective group ID

       -h FILE
              FILE exists and is a symbolic link (same as -L)

       -k FILE
              FILE exists and has its sticky bit set

       -L FILE
              FILE exists and is a symbolic link (same as -h)

       -O FILE
              FILE exists and is owned by the effective user ID

       -p FILE
              FILE exists and is a named pipe

       -r FILE
              FILE exists and read permission is granted

       -s FILE
              FILE exists and has a size greater than zero
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ 
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ man test
TEST(1)                                         User Commands                                         TEST(1)

NAME
       test - check file types and compare values

SYNOPSIS
TEST(1)                                         User Commands                                         TEST(1)

NAME
       test - check file types and compare values

SYNOPSIS
       test EXPRESSION
       test

       [ EXPRESSION ]
       [ ]
       [ OPTION

DESCRIPTION
       Exit with the status determined by EXPRESSION.

       --help display this help and exit

       --version
              output version information and exit

       An omitted EXPRESSION defaults to false.  Otherwise, EXPRESSION is true or false and sets exit status.
       It is one of:

       ( EXPRESSION )
              EXPRESSION is true

       ! EXPRESSION
              EXPRESSION is false

       EXPRESSION1 -a EXPRESSION2
              both EXPRESSION1 and EXPRESSION2 are true

       EXPRESSION1 -o EXPRESSION2
              either EXPRESSION1 or EXPRESSION2 is true

       -n STRING
              the length of STRING is nonzero

       STRING equivalent to -n STRING

       -z STRING
              the length of STRING is zero

       STRING1 = STRING2
              the strings are equal

       STRING1 != STRING2
              the strings are not equal

       INTEGER1 -eq INTEGER2
              INTEGER1 is equal to INTEGER2

       INTEGER1 -ge INTEGER2
              INTEGER1 is greater than or equal to INTEGER2

       INTEGER1 -gt INTEGER2
              INTEGER1 is greater than INTEGER2

       INTEGER1 -le INTEGER2
              INTEGER1 is less than or equal to INTEGER2

       INTEGER1 -lt INTEGER2
              INTEGER1 is less than INTEGER2

       INTEGER1 -ne INTEGER2
              INTEGER1 is not equal to INTEGER2

       FILE1 -ef FILE2
              FILE1 and FILE2 have the same device and inode numbers

       FILE1 -nt FILE2
              FILE1 is newer (modification date) than FILE2

       FILE1 -ot FILE2
              FILE1 is older than FILE2

       -b FILE
              FILE exists and is block special

       -c FILE
              FILE exists and is character special

       -d FILE
              FILE exists and is a directory

       -e FILE
              FILE exists

       -f FILE
              FILE exists and is a regular file

       -g FILE
              FILE exists and is set-group-ID

       -G FILE
              FILE exists and is owned by the effective group ID

       -h FILE
              FILE exists and is a symbolic link (same as -L)

       -k FILE
              FILE exists and has its sticky bit set

       [ ]
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ if (( 001 = 1 )); then
> echo "yes"
> fi
bash: ((: 001 = 1 : attempted assignment to non-variable (error token is "= 1 ")
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ if (( 001 == 1 )); then echo "yes"; f
i                                                                                                              
yes
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ man expr
EXPR(1)                                         User Commands                                         EXPR(1)

NAME
       expr - evaluate expressions

SYNOPSIS
       expr EXPRESSION
       expr OPTION

DESCRIPTION
       --help display this help and exit

       --version
              output version information and exit

       Print  the value of EXPRESSION to standard output.  A blank line below separates increasing precedence
       groups.  EXPRESSION may be:

       ARG1 | ARG2
              ARG1 if it is neither null nor 0, otherwise ARG2

       ARG1 & ARG2
              ARG1 if neither argument is null or 0, otherwise 0

       ARG1 < ARG2
              ARG1 is less than ARG2

       ARG1 <= ARG2
              ARG1 is less than or equal to ARG2

       ARG1 = ARG2
              ARG1 is equal to ARG2

       ARG1 != ARG2
              ARG1 is unequal to ARG2

       ARG1 >= ARG2
              ARG1 is greater than or equal to ARG2

       ARG1 > ARG2
              ARG1 is greater than ARG2

       ARG1 + ARG2
              arithmetic sum of ARG1 and ARG2

       ARG1 - ARG2
              arithmetic difference of ARG1 and ARG2

       ARG1 * ARG2
              arithmetic product of ARG1 and ARG2

       ARG1 / ARG2
              arithmetic quotient of ARG1 divided by ARG2

       ARG1 % ARG2
              arithmetic remainder of ARG1 divided by ARG2

marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ 
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        deleted:    salesdata.txt~

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   #*ansi-term*#
        modified:   *ansi-term*

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        *ansi-term*~
        100
        100]
        arithmetics1.sh
        arithmetics1.sh~
        arithmetics2.sh
        arithmetics2.sh~
        if_example.sh
        if_example.sh~
        if_example2.sh
        if_example2.sh~

marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ git add *
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ git commit -m "edit"
[master 02a8d9e] edit
 13 files changed, 2888 insertions(+), 2845 deletions(-)
 rewrite bash_scripting_tutorial/#*ansi-term*# (66%)
 copy bash_scripting_tutorial/{#*ansi-term*# => *ansi-term*~} (88%)
 rename bash_scripting_tutorial/{salesdata.txt~ => 100} (100%)
 create mode 100644 bash_scripting_tutorial/100]
 create mode 100755 bash_scripting_tutorial/arithmetics1.sh
 create mode 100755 bash_scripting_tutorial/arithmetics1.sh~
 create mode 100755 bash_scripting_tutorial/arithmetics2.sh
 create mode 100755 bash_scripting_tutorial/arithmetics2.sh~
 create mode 100755 bash_scripting_tutorial/if_example.sh
 create mode 100755 bash_scripting_tutorial/if_example.sh~
 create mode 100755 bash_scripting_tutorial/if_example2.sh
 create mode 100755 bash_scripting_tutorial/if_example2.sh~
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ git push origin master
Username for 'https://github.com': insighthorizon
Password for 'https://insighthorizon@github.com': 
Counting objects: 10, done.
Delta compression using up to 3 threads.
Compressing objects: 100% (9/9), done.
Writing objects: 100% (10/10), 6.97 KiB | 0 bytes/s, done.
Total 10 (delta 3), reused 0 (delta 0)
remote: Resolving deltas: 100% (3/3), completed with 2 local objects.
To https://github.com/insighthorizon/tutorials.git
   a63f724..02a8d9e  master -> master
marek@marek-virtual-machine:~/Documents/tutorials/bash_scripting_tutorial$ cd ../../notes/
marek@marek-virtual-machine:~/Documents/notes$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   bash_notes.txt

no changes added to commit (use "git add" and/or "git commit -a")
marek@marek-virtual-machine:~/Documents/notes$ git add *
marek@marek-virtual-machine:~/Documents/notes$ git commit -m "edit"
[master e570ba5] edit
 1 file changed, 53 insertions(+)
marek@marek-virtual-machine:~/Documents/notes$ git push origin master
Username for 'https://github.com': insighthorizon
Password for 'https://insighthorizon@github.com': 
Counting objects: 3, done.
Delta compression using up to 3 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 1.07 KiB | 0 bytes/s, done.
Total 3 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/insighthorizon/notes.git
   0fdcb4a..e570ba5  master -> master
marek@marek-virtual-machine:~/Documents/notes$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
marek@marek-virtual-machine:~/Documents/notes$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   bash_notes.txt

no changes added to commit (use "git add" and/or "git commit -a")
marek@marek-virtual-machine:~/Documents/notes$ git add *
marek@marek-virtual-machine:~/Documents/notes$ git commit -m "edit
> "
[master 4232388] edit
 1 file changed, 2 insertions(+)
marek@marek-virtual-machine:~/Documents/notes$ git push origin master
Username for 'https://github.com': isnighthorizon
Password for 'https://isnighthorizon@github.com': 
remote: Invalid username or password.
fatal: Authentication failed for 'https://github.com/insighthorizon/notes.git/'
marek@marek-virtual-machine:~/Documents/notes$ git push origin master
Username for 'https://github.com': insighthorizon
Password for 'https://insighthorizon@github.com': 
Counting objects: 3, done.
Delta compression using up to 3 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 391 bytes | 0 bytes/s, done.
Total 3 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/insighthorizon/notes.git
   e570ba5..4232388  master -> master
marek@marek-virtual-machine:~/Documents/notes$ 